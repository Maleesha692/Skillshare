package com.skillshare.skillsharebackend.controller;

import com.skillshare.skillsharebackend.dto.FollowDTO;
import com.skillshare.skillsharebackend.dto.UserDTO;
import com.skillshare.skillsharebackend.model.User;
import com.skillshare.skillsharebackend.service.FollowService;
import com.skillshare.skillsharebackend.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/follow")
public class FollowController {

    @Autowired
    private FollowService followService;

    @Autowireda
    private UserService userService;

    @PostMapping("/follow")
    public ResponseEntity<String> follow(@RequestBody FollowDTO followDTO) {
        User follower = userService.getUserById(followDTO.getFollowerId());
        User following = userService.getUserById(followDTO.getFollowingId());

        if (follower == null || following == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }

        if (follower.equals(following)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Cannot follow yourself");
        }

        followService.followUser(followDTO, follower);

        return ResponseEntity.ok("Followed successfully");
    }

    @PostMapping("/unfollow")
    public ResponseEntity<String> unfollow(@RequestBody FollowDTO followDTO) {
        User follower = userService.getUserById(followDTO.getFollowerId());
        User following = userService.getUserById(followDTO.getFollowingId());

        if (follower == null || following == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }

        if (follower.equals(following)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Cannot unfollow yourself");
        }

        followService.unfollowUser(followDTO, follower);
        return ResponseEntity.ok("Unfollowed successfully");
    }


    @GetMapping("/followers")
    public ResponseEntity<List<UserDTO>> getFollowers(@RequestParam Long userId) {
        User user = userService.getUserById(userId);
        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
        List<UserDTO> followers = followService.getFollowers(user);
        return ResponseEntity.ok(followers);
    }

    @GetMapping("/following")
    public ResponseEntity<List<UserDTO>> getFollowing(@RequestParam Long userId) {
        User user = userService.getUserById(userId);
        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
        List<UserDTO> following = followService.getFollowing(user);
        return ResponseEntity.ok(following);
    }
}

